service: facial-vote-backend
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1

custom:
  # replace with your verified SES domain
  domain: work@chibuikenwa.com 
  uploaded_s3_bucket_name: ${self:service}-facialvote

functions:
  preSignUp:
    # Would later secure this url for only admin
    handler: src/functions/pre-sign-up.handler

  defineAuthChallenge:
    handler: src/functions/define-auth-challenge.handler

  createAuthChallenge:
    handler: src/functions/create-auth-challenge.handler
    environment:
      SES_FROM_ADDRESS: ${self:custom.domain}
    iamRoleStatements:
      - Effect: Allow
        Action: ses:SendEmail
        Resource: 
          - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*
          - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/*

  verifyAuthChallengeResponse:
    handler: src/functions/verify-auth-challenge-response.handler

resources:
  Resources:    
    FacialVoteUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        UsernameAttributes:
          - email
        Policies:
          # this is only to satisfy Cognito requirements
          # we won't be using passwords, but we also don't
          # want weak passwords in the system ;-)
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: false
            Required: true
            Name: email
            StringAttributeConstraints: 
              MinLength: '8'
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
          DefineAuthChallenge: !GetAtt DefineAuthChallengeLambdaFunction.Arn
          CreateAuthChallenge: !GetAtt CreateAuthChallengeLambdaFunction.Arn
          VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn

    FacialVoteUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref FacialVoteUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    FacialVoteIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: facial_vote_upload_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: FacialVoteUserPoolClient
            ProviderName:
              Fn::GetAtt: [FacialVoteUserPool, ProviderName]
    
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}_appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: FacialVoteIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
                - Effect: "Allow"
                  Action: 
                    - "s3:GetObject"
                    - "s3:ListAllMyBuckets"
                    - "s3:PutObject"
                  Resource:
                  - Fn::Join:
                    - ''
                    -
                      - Fn::GetAtt: [UploadedS3Bucket, Arn]
                      - '/photos/'
                      - '$'
                      - '{cognito-identity.amazonaws.com:sub}/*'

    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}_appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: FacialVoteIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action: 
                    - "s3:GetObject"
                    - "s3:PutObject"
                  Resource:
                  - Fn::Join:
                    - ''
                    -
                      - Fn::GetAtt: [UploadedS3Bucket, Arn]
                      - '/compare/'
                      - '$'
                      - '{cognito-identity.amazonaws.com:sub}/*'
    
    UploadedS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.uploaded_s3_bucket_name}
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: 
              - '*'
            AllowedMethods: 
              - HEAD
              - GET
              - PUT
              - POST
            AllowedOrigins: 
              - '*'
            ExposedHeaders:
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
            MaxAge: 3000

    UserPoolPreSignUpLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref PreSignUpLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn

    UserPoolDefineAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref DefineAuthChallengeLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn

    UserPoolCreateAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref CreateAuthChallengeLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn

    UserPoolVerifyAuthChallengeResponseLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref VerifyAuthChallengeResponseLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn
