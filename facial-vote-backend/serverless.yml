service: facial-vote-backend
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions
  - serverless-pseudo-parameters
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1

custom:
  # replace with your verified SES domain
  ses_domain: work@chibuikenwa.com 
  uploaded_s3_bucket_name: ${self:service}-facialvote
  rekognition_collection_name: ${self:service}-facialvote
  dynamodb_name: ${self:service}-facialvote
  confidence_face: 90

functions:
  preSignUp:
    # Would later secure this url for only admin
    handler: src/functions/pre-sign-up.handler

  defineAuthChallenge:
    handler: src/functions/define-auth-challenge.handler

  createAuthChallenge:
    handler: src/functions/create-auth-challenge.handler
    environment:
      SES_FROM_ADDRESS: ${self:custom.ses_domain}
    iamRoleStatements:
      - Effect: Allow
        Action: ses:SendEmail
        Resource: 
          - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*
          - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/*

  verifyAuthChallengeResponse:
    handler: src/functions/verify-auth-challenge-response.handler

  triggerSavePhoto:
    handler: src/functions/stepfunctions/trigger-save-photo.handler
    environment:
      STATE_MACHINE_ARN: ${self:outputs.SaveFaceStateMachine.Value}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "states:StartExecution"
        Resource:
          - "*"
    events:
      - s3:
          bucket: ${self:custom.uploaded_s3_bucket_name}
          event: s3:ObjectCreated:*
          rules:
            - prefix: private/
          existing: true
          forceDeploy: true
  
  triggerComparePhoto:
    handler: src/functions/stepfunctions/trigger-compare-photo.handler
    environment:
      STATE_MACHINE_ARN: ${self:outputs.SaveFaceStateMachine.Value}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "states:StartExecution"
        Resource:
          - "*"
    events:
      - s3:
          bucket: ${self:custom.uploaded_s3_bucket_name}
          event: s3:ObjectCreated:*
          rules:
            - prefix: public/
          existing: true
          forceDeploy: true

  validateFace:
    handler: src/functions/stepfunctions/savephoto/validate-face.handler
    environment:
      CONFIDENCE_FACE: ${self:custom.confidence_face}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rekognition:DetectFaces
        Resource:
          - "*"

  checkDuplicate:
    handler: src/functions/stepfunctions/savephoto/check-duplicate.handler
    environment:
      CONFIDENCE_FACE: ${self:custom.confidence_face}
      COLLECTION_ID: ${self:custom.rekognition_collection_name}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rekognition:SearchFacesByImage
        Resource:
          - "*"
    
  indexFace:
    handler: src/functions/stepfunctions/savephoto/index-face.handler
    environment:
      CONFIDENCE_FACE: ${self:custom.confidence_face}
      COLLECTION_ID: ${self:custom.rekognition_collection_name}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rekognition:IndexFaces
        Resource:
          - "*"

  saveFaceDynamoDb:
    handler: src/functions/stepfunctions/savephoto/save-face-dynamodb.handler
    environment:
      DYNAMODB_NAME: ${self:custom.dynamodb_name}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt FacialVoteDB.Arn

stepFunctions:
  stateMachines:
    SaveFace:
      name: SaveFaceMachine
      definition:
        Comment: "Indexes users photo to Amazon Rekongition and saves metadata to DynamoDb"
        StartAt: ValidateFace
        States:
          ValidateFace:
            Type: Task
            Resource: !GetAtt validateFace.Arn 
            Next: IsFaceValidated
          IsFaceValidated:
            Type: Choice
            Choices:
            - Variable: "$.status"
              StringEquals: SUCCESS
              Next: CheckDuplicate
            - Variable: "$.status"
              StringEquals: ERROR
              Next: Fail
          CheckDuplicate:
            Type: Task
            Resource: !GetAtt checkDuplicate.Arn
            Next: IsFaceDuplicate
          IsFaceDuplicate:
            Type: Choice
            Choices:
            - Variable: "$.status"
              StringEquals: SUCCESS
              Next: IndexFace
            - Variable: "$.status"
              StringEquals: ERROR
              Next: Fail
          IndexFace:
            Type: Task
            Resource: !GetAtt indexFace.Arn
            Next: SaveFaceDynamoDb
          SaveFaceDynamoDb:
            Type: Task
            Resource: !GetAtt saveFaceDynamoDb.Arn
            Next: IsFaceSaved
          IsFaceSaved:
            Type: Choice
            Choices:
            - Variable: "$.status"
              StringEquals: SUCCESS
              Next: Success
            - Variable: "$.status"
              StringEquals: ERROR
              Next: Fail
          Success:
            Type: Succeed
          Fail:
            Type: Fail


resources:
  Resources:   
    # User pool 
    FacialVoteUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        UsernameAttributes:
          - email
        Policies:
          # this is only to satisfy Cognito requirements
          # we won't be using passwords, but we also don't
          # want weak passwords in the system ;-)
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: false
            Required: true
            Name: email
            StringAttributeConstraints: 
              MinLength: '8'
        LambdaConfig:
          PreSignUp: !GetAtt PreSignUpLambdaFunction.Arn
          DefineAuthChallenge: !GetAtt DefineAuthChallengeLambdaFunction.Arn
          CreateAuthChallenge: !GetAtt CreateAuthChallengeLambdaFunction.Arn
          VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponseLambdaFunction.Arn

    FacialVoteUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref FacialVoteUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    FacialVoteIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: facial_vote_upload_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: FacialVoteUserPoolClient
            ProviderName:
              Fn::GetAtt: [FacialVoteUserPool, ProviderName]
    
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: FacialVoteIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}_appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: FacialVoteIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
                - Effect: "Allow"
                  Action: 
                    - "s3:GetObject"
                    - "s3:ListAllMyBuckets"
                    - "s3:PutObject"
                  Resource:
                  - Fn::Join:
                    - ''
                    -
                      - Fn::GetAtt: [UploadedS3Bucket, Arn]
                      - '/private/'
                      - '$'
                      - '{cognito-identity.amazonaws.com:sub}/*'

    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}_appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: FacialVoteIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action: 
                    - "s3:GetObject"
                    - "s3:PutObject"
                  Resource:
                  - Fn::Join:
                    - ''
                    -
                      - Fn::GetAtt: [UploadedS3Bucket, Arn]
                      - '/public/'
                      - '$'
                      - '{cognito-identity.amazonaws.com:sub}/*'
    
    # S3 Bucket
    UploadedS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.uploaded_s3_bucket_name}
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: 
              - '*'
            AllowedMethods: 
              - HEAD
              - GET
              - PUT
              - POST
            AllowedOrigins: 
              - '*'
            ExposedHeaders:
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
            MaxAge: 3000
    
    # AWS Rekognition
    RekognitionCollection:
      Type: AWS::Rekognition::Collection
      Properties:
         CollectionId: ${self:custom.rekognition_collection_name}
    
    #DynamoDB
    FacialVoteDB:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb_name}
        AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GS1PK
          AttributeType: S
        - AttributeName: GS1SK
          AttributeType: S
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GS1
            KeySchema:
              - AttributeName: GS1PK
                KeyType: HASH
              - AttributeName: GS1SK
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST

    # Lambda permissions
    UserPoolPreSignUpLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref PreSignUpLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn

    UserPoolDefineAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref DefineAuthChallengeLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn

    UserPoolCreateAuthChallengeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref CreateAuthChallengeLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn

    UserPoolVerifyAuthChallengeResponseLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: !Ref VerifyAuthChallengeResponseLambdaFunction
        SourceArn: !GetAtt FacialVoteUserPool.Arn

outputs:
  SaveFaceStateMachine:
      Description: The ARN of the SaveFace state machine
      Value:
        Ref: SaveFaceMachine
  DynamoDbId:
      Description: The ARN of the DynamoDB
      Value:
        Ref: FacialVoteDB
